// Mocks generated by Mockito 5.4.6 from annotations
// in meinbssb/test/unit/services/api_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:typed_data' as _i10;

import 'package:meinbssb/models/bank_data.dart' as _i16;
import 'package:meinbssb/models/contact.dart' as _i15;
import 'package:meinbssb/models/disziplin.dart' as _i21;
import 'package:meinbssb/models/fremde_verband.dart' as _i25;
import 'package:meinbssb/models/pass_data_zve.dart' as _i14;
import 'package:meinbssb/models/register_schulungen_teilnehmer_response.dart'
    as _i3;
import 'package:meinbssb/models/schulung.dart' as _i18;
import 'package:meinbssb/models/schulungsart.dart' as _i20;
import 'package:meinbssb/models/schulungstermine.dart' as _i19;
import 'package:meinbssb/models/user_data.dart' as _i12;
import 'package:meinbssb/models/verein.dart' as _i24;
import 'package:meinbssb/models/zweitmitgliedschaft_data.dart' as _i13;
import 'package:meinbssb/services/api/auth_service.dart' as _i4;
import 'package:meinbssb/services/api/bank_service.dart' as _i22;
import 'package:meinbssb/services/api/training_service.dart' as _i17;
import 'package:meinbssb/services/api/user_service.dart' as _i11;
import 'package:meinbssb/services/api/verein_service.dart' as _i23;
import 'package:meinbssb/services/core/cache_service.dart' as _i6;
import 'package:meinbssb/services/core/config_service.dart' as _i5;
import 'package:meinbssb/services/core/image_service.dart' as _i9;
import 'package:meinbssb/services/core/network_service.dart' as _i8;
import 'package:meinbssb/services/core/token_service.dart' as _i26;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterSchulungenTeilnehmerResponse_2 extends _i1.SmartFake
    implements _i3.RegisterSchulungenTeilnehmerResponse {
  _FakeRegisterSchulungenTeilnehmerResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i4.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<Map<String, dynamic>> register({
    required String? firstName,
    required String? lastName,
    required String? passNumber,
    required String? email,
    required String? birthDate,
    required String? zipCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #passNumber: passNumber,
            #email: email,
            #birthDate: birthDate,
            #zipCode: zipCode,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);

  @override
  _i2.Future<Map<String, dynamic>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);

  @override
  _i2.Future<Map<String, dynamic>> passwordReset(String? passNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #passwordReset,
          [passNumber],
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);

  @override
  _i2.Future<Map<String, dynamic>> changePassword(
    int? personId,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            personId,
            newPassword,
          ],
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);

  @override
  _i2.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> findePersonID2(
    String? nachname,
    String? passnummer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findePersonID2,
          [
            nachname,
            passnummer,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i5.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int? getInt(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getInt,
        [
          key,
          section,
        ],
      )) as int?);

  @override
  String? getString(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getString,
        [
          key,
          section,
        ],
      )) as String?);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i6.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<String?> getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i2.Future<String?>.value(),
      ) as _i2.Future<String?>);

  @override
  _i2.Future<void> setJson(
    String? key,
    Map<String, dynamic>? json,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setJson,
          [
            key,
            json,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<Map<String, dynamic>?> getJson(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getJson,
          [key],
        ),
        returnValue: _i2.Future<Map<String, dynamic>?>.value(),
      ) as _i2.Future<Map<String, dynamic>?>);

  @override
  _i2.Future<void> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<int?> getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValue: _i2.Future<int?>.value(),
      ) as _i2.Future<int?>);

  @override
  _i2.Future<void> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool?> getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValue: _i2.Future<bool?>.value(),
      ) as _i2.Future<bool?>);

  @override
  _i2.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> clearPattern(String? pattern) => (super.noSuchMethod(
        Invocation.method(
          #clearPattern,
          [pattern],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<void> setCacheTimestampForKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #setCacheTimestampForKey,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<int?> getCacheTimestampForKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getCacheTimestampForKey,
          [key],
        ),
        returnValue: _i2.Future<int?>.value(),
      ) as _i2.Future<int?>);

  @override
  _i2.Future<T> getCachedData<T>(
    String? cacheKey,
    _i2.Future<T> Function()? getCachedData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedData,
          [
            cacheKey,
            getCachedData,
          ],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #getCachedData,
                  [
                    cacheKey,
                    getCachedData,
                  ],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #getCachedData,
                [
                  cacheKey,
                  getCachedData,
                ],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> cacheAndRetrieveData<T>(
    String? cacheKey,
    Duration? validityDuration,
    _i2.Future<T> Function()? fetchData,
    T Function(dynamic)? processResponse,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAndRetrieveData,
          [
            cacheKey,
            validityDuration,
            fetchData,
            processResponse,
          ],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #cacheAndRetrieveData,
                  [
                    cacheKey,
                    validityDuration,
                    fetchData,
                    processResponse,
                  ],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #cacheAndRetrieveData,
                [
                  cacheKey,
                  validityDuration,
                  fetchData,
                  processResponse,
                ],
              ),
            ),
      ) as _i2.Future<T>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i8.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<bool> hasInternet() => (super.noSuchMethod(
        Invocation.method(
          #hasInternet,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  Duration getCacheExpirationDuration() => (super.noSuchMethod(
        Invocation.method(
          #getCacheExpirationDuration,
          [],
        ),
        returnValue: _FakeDuration_1(
          this,
          Invocation.method(
            #getCacheExpirationDuration,
            [],
          ),
        ),
      ) as Duration);
}

/// A class which mocks [ImageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageService extends _i1.Mock implements _i9.ImageService {
  MockImageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> cacheSchuetzenausweis(
    int? personId,
    _i10.Uint8List? imageData,
    int? timestamp,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSchuetzenausweis,
          [
            personId,
            imageData,
            timestamp,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i10.Uint8List?> getCachedSchuetzenausweis(
    int? personId,
    Duration? validity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedSchuetzenausweis,
          [
            personId,
            validity,
          ],
        ),
        returnValue: _i2.Future<_i10.Uint8List?>.value(),
      ) as _i2.Future<_i10.Uint8List?>);

  @override
  _i2.Future<bool> isDeviceOnline() => (super.noSuchMethod(
        Invocation.method(
          #isDeviceOnline,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i10.Uint8List> fetchAndCacheSchuetzenausweis(
    int? personId,
    _i2.Future<_i10.Uint8List> Function()? fetchFunction,
    Duration? validityDuration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAndCacheSchuetzenausweis,
          [
            personId,
            fetchFunction,
            validityDuration,
          ],
        ),
        returnValue: _i2.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
      ) as _i2.Future<_i10.Uint8List>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i11.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i12.UserData?> fetchPassdaten(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPassdaten,
          [personId],
        ),
        returnValue: _i2.Future<_i12.UserData?>.value(),
      ) as _i2.Future<_i12.UserData?>);

  @override
  _i2.Future<bool> updateKritischeFelderUndAdresse(_i12.UserData? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateKritischeFelderUndAdresse,
          [userData],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<void> clearPassdatenCache(int? personId) => (super.noSuchMethod(
        Invocation.method(
          #clearPassdatenCache,
          [personId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> clearAllPassdatenCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAllPassdatenCache,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<List<_i13.ZweitmitgliedschaftData>> fetchZweitmitgliedschaften(
          int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchZweitmitgliedschaften,
          [personId],
        ),
        returnValue: _i2.Future<List<_i13.ZweitmitgliedschaftData>>.value(
            <_i13.ZweitmitgliedschaftData>[]),
      ) as _i2.Future<List<_i13.ZweitmitgliedschaftData>>);

  @override
  _i2.Future<List<_i14.PassDataZVE>> fetchPassdatenZVE(
    int? passdatenId,
    int? personId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPassdatenZVE,
          [
            passdatenId,
            personId,
          ],
        ),
        returnValue:
            _i2.Future<List<_i14.PassDataZVE>>.value(<_i14.PassDataZVE>[]),
      ) as _i2.Future<List<_i14.PassDataZVE>>);

  @override
  _i2.Future<List<Map<String, dynamic>>> fetchKontakte(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchKontakte,
          [personId],
        ),
        returnValue: _i2.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i2.Future<List<Map<String, dynamic>>>);

  @override
  _i2.Future<bool> addKontakt(_i15.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #addKontakt,
          [contact],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> deleteKontakt(_i15.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #deleteKontakt,
          [contact],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> updateKontakt(_i15.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #updateKontakt,
          [contact],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<List<_i16.BankData>> fetchBankData(int? webloginId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBankData,
          [webloginId],
        ),
        returnValue: _i2.Future<List<_i16.BankData>>.value(<_i16.BankData>[]),
      ) as _i2.Future<List<_i16.BankData>>);
}

/// A class which mocks [TrainingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrainingService extends _i1.Mock implements _i17.TrainingService {
  MockTrainingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i18.Schulung>> fetchAngemeldeteSchulungen(
    int? personId,
    String? abDatum,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAngemeldeteSchulungen,
          [
            personId,
            abDatum,
          ],
        ),
        returnValue: _i2.Future<List<_i18.Schulung>>.value(<_i18.Schulung>[]),
      ) as _i2.Future<List<_i18.Schulung>>);

  @override
  _i2.Future<List<_i19.Schulungstermine>> fetchSchulungstermine(
          String? abDatum) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSchulungstermine,
          [abDatum],
        ),
        returnValue: _i2.Future<List<_i19.Schulungstermine>>.value(
            <_i19.Schulungstermine>[]),
      ) as _i2.Future<List<_i19.Schulungstermine>>);

  @override
  _i2.Future<List<_i20.Schulungsart>> fetchSchulungsarten() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSchulungsarten,
          [],
        ),
        returnValue:
            _i2.Future<List<_i20.Schulungsart>>.value(<_i20.Schulungsart>[]),
      ) as _i2.Future<List<_i20.Schulungsart>>);

  @override
  _i2.Future<List<_i18.Schulung>> fetchAbsolvierteSchulungen(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAbsolvierteSchulungen,
          [personId],
        ),
        returnValue: _i2.Future<List<_i18.Schulung>>.value(<_i18.Schulung>[]),
      ) as _i2.Future<List<_i18.Schulung>>);

  @override
  _i2.Future<bool> registerForSchulung(
    int? personId,
    int? schulungId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerForSchulung,
          [
            personId,
            schulungId,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> unregisterFromSchulung(int? teilnehmerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unregisterFromSchulung,
          [teilnehmerId],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<void> clearSchulungenCache(int? personId) => (super.noSuchMethod(
        Invocation.method(
          #clearSchulungenCache,
          [personId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> clearAllSchulungenCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAllSchulungenCache,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<List<_i21.Disziplin>> fetchDisziplinen() => (super.noSuchMethod(
        Invocation.method(
          #fetchDisziplinen,
          [],
        ),
        returnValue: _i2.Future<List<_i21.Disziplin>>.value(<_i21.Disziplin>[]),
      ) as _i2.Future<List<_i21.Disziplin>>);

  @override
  _i2.Future<void> clearDisziplinenCache() => (super.noSuchMethod(
        Invocation.method(
          #clearDisziplinenCache,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i3.RegisterSchulungenTeilnehmerResponse>
      registerSchulungenTeilnehmer({
    required int? schulungTerminId,
    required _i12.UserData? user,
    required String? email,
    required String? telefon,
    required _i16.BankData? bankData,
    required List<Map<String, dynamic>>? felderArray,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #registerSchulungenTeilnehmer,
              [],
              {
                #schulungTerminId: schulungTerminId,
                #user: user,
                #email: email,
                #telefon: telefon,
                #bankData: bankData,
                #felderArray: felderArray,
              },
            ),
            returnValue:
                _i2.Future<_i3.RegisterSchulungenTeilnehmerResponse>.value(
                    _FakeRegisterSchulungenTeilnehmerResponse_2(
              this,
              Invocation.method(
                #registerSchulungenTeilnehmer,
                [],
                {
                  #schulungTerminId: schulungTerminId,
                  #user: user,
                  #email: email,
                  #telefon: telefon,
                  #bankData: bankData,
                  #felderArray: felderArray,
                },
              ),
            )),
          ) as _i2.Future<_i3.RegisterSchulungenTeilnehmerResponse>);
}

/// A class which mocks [BankService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBankService extends _i1.Mock implements _i22.BankService {
  MockBankService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i16.BankData>> fetchBankData(int? webloginId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBankData,
          [webloginId],
        ),
        returnValue: _i2.Future<List<_i16.BankData>>.value(<_i16.BankData>[]),
      ) as _i2.Future<List<_i16.BankData>>);

  @override
  _i2.Future<bool> registerBankData(_i16.BankData? bankData) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerBankData,
          [bankData],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> deleteBankData(_i16.BankData? bankData) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBankData,
          [bankData],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
}

/// A class which mocks [VereinService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVereinService extends _i1.Mock implements _i23.VereinService {
  MockVereinService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i24.Verein>> fetchVereine() => (super.noSuchMethod(
        Invocation.method(
          #fetchVereine,
          [],
        ),
        returnValue: _i2.Future<List<_i24.Verein>>.value(<_i24.Verein>[]),
      ) as _i2.Future<List<_i24.Verein>>);

  @override
  _i2.Future<List<_i24.Verein>> fetchVerein(int? vereinsNr) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVerein,
          [vereinsNr],
        ),
        returnValue: _i2.Future<List<_i24.Verein>>.value(<_i24.Verein>[]),
      ) as _i2.Future<List<_i24.Verein>>);

  @override
  _i2.Future<List<_i25.FremdeVerband>> fetchFremdeVerbaende() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFremdeVerbaende,
          [],
        ),
        returnValue:
            _i2.Future<List<_i25.FremdeVerband>>.value(<_i25.FremdeVerband>[]),
      ) as _i2.Future<List<_i25.FremdeVerband>>);
}

/// A class which mocks [TokenService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenService extends _i1.Mock implements _i26.TokenService {
  MockTokenService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<String> requestToken() => (super.noSuchMethod(
        Invocation.method(
          #requestToken,
          [],
        ),
        returnValue: _i2.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #requestToken,
            [],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<void> clearToken() => (super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<String> getAuthToken() => (super.noSuchMethod(
        Invocation.method(
          #getAuthToken,
          [],
        ),
        returnValue: _i2.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getAuthToken,
            [],
          ),
        )),
      ) as _i2.Future<String>);
}
