// Mocks generated by Mockito 5.4.6 from annotations
// in meinbssb/test/unit/services/api/starting_rights_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:meinbssb/models/passdaten_akzept_or_aktiv_data.dart' as _i6;
import 'package:meinbssb/models/user_data.dart' as _i5;
import 'package:meinbssb/models/verein_data.dart' as _i7;
import 'package:meinbssb/models/zweitmitgliedschaft_data.dart' as _i8;
import 'package:meinbssb/services/api/user_service.dart' as _i3;
import 'package:meinbssb/services/api/verein_service.dart' as _i4;
import 'package:meinbssb/services/core/email_service.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserService].
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i5.UserData?> fetchPassdaten(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPassdaten,
          [personId],
        ),
        returnValue: _i2.Future<_i5.UserData?>.value(),
      ) as _i2.Future<_i5.UserData?>);

  @override
  _i2.Future<_i6.PassdatenAkzeptOrAktiv?> fetchPassdatenAkzeptierterOderAktiverPass(
    int? personId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPassdatenAkzeptierterOderAktiverPass,
          [personId],
        ),
        returnValue: _i2.Future<_i6.PassdatenAkzeptOrAktiv?>.value(),
      ) as _i2.Future<_i6.PassdatenAkzeptOrAktiv?>);

  @override
  _i2.Future<List<_i8.ZweitmitgliedschaftData>> fetchZweitmitgliedschaften(
    int? personId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchZweitmitgliedschaften,
          [personId],
        ),
        returnValue: _i2.Future<List<_i8.ZweitmitgliedschaftData>>.value(
            <_i8.ZweitmitgliedschaftData>[]),
      ) as _i2.Future<List<_i8.ZweitmitgliedschaftData>>);
}

/// A class which mocks [VereinService].
/// See the documentation for Mockito's code generation for more information.
class MockVereinService extends _i1.Mock implements _i4.VereinService {
  MockVereinService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i7.Verein>> fetchVerein(int? vereinNr) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVerein,
          [vereinNr],
        ),
        returnValue: _i2.Future<List<_i7.Verein>>.value(<_i7.Verein>[]),
      ) as _i2.Future<List<_i7.Verein>>);

  @override
  _i2.Future<List<_i7.Verein>> fetchVereine() => (super.noSuchMethod(
        Invocation.method(
          #fetchVereine,
          [],
        ),
        returnValue: _i2.Future<List<_i7.Verein>>.value(<_i7.Verein>[]),
      ) as _i2.Future<List<_i7.Verein>>);
}

/// A class which mocks [EmailService].
/// See the documentation for Mockito's code generation for more information.
class MockEmailService extends _i1.Mock implements _i9.EmailService {
  MockEmailService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<String>> getEmailAddressesByPersonId(String? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmailAddressesByPersonId,
          [personId],
        ),
        returnValue: _i2.Future<List<String>>.value(<String>[]),
      ) as _i2.Future<List<String>>);

  @override
  _i2.Future<void> sendStartingRightsChangeNotifications({
    required int? personId,
    required _i5.UserData? passdaten,
    required List<String>? userEmailAddresses,
    required List<String>? clubEmailAddresses,
    required List<_i8.ZweitmitgliedschaftData>? zweitmitgliedschaften,
    required _i6.PassdatenAkzeptOrAktiv? zveData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendStartingRightsChangeNotifications,
          [],
          {
            #personId: personId,
            #passdaten: passdaten,
            #userEmailAddresses: userEmailAddresses,
            #clubEmailAddresses: clubEmailAddresses,
            #zweitmitgliedschaften: zweitmitgliedschaften,
            #zveData: zveData,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}
