// Mocks generated by Mockito 5.4.6 from annotations
// in meinbssb/test/unit/services/core/email_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i7;

import 'package:mailer/mailer.dart' as _i2;
import 'package:mailer/smtp_server.dart' as _i10;
import 'package:meinbssb/services/core/calendar_service.dart' as _i8;
import 'package:meinbssb/services/core/config_service.dart' as _i3;
import 'package:meinbssb/services/core/email_service.dart' as _i9;
import 'package:meinbssb/services/core/http_client.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSendReport_0 extends _i1.SmartFake implements _i2.SendReport {
  _FakeSendReport_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i3.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int? getInt(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getInt,
        [
          key,
          section,
        ],
      )) as int?);

  @override
  String? getString(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getString,
        [
          key,
          section,
        ],
      )) as String?);

  @override
  List<String>? getList(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getList,
        [
          key,
          section,
        ],
      )) as List<String>?);

  @override
  bool? getBool(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getBool,
        [
          key,
          section,
        ],
      )) as bool?);
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  int get serverTimeout => (super.noSuchMethod(
        Invocation.getter(#serverTimeout),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<dynamic> post(
    String? endpoint,
    Map<String, dynamic>? body, {
    String? overrideBaseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            endpoint,
            body,
          ],
          {#overrideBaseUrl: overrideBaseUrl},
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> put(
    String? endpoint,
    Map<String, dynamic>? body, {
    String? overrideBaseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            endpoint,
            body,
          ],
          {#overrideBaseUrl: overrideBaseUrl},
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> delete(
    String? endpoint, {
    Map<String, dynamic>? body,
    String? overrideBaseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [endpoint],
          {
            #body: body,
            #overrideBaseUrl: overrideBaseUrl,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> get(
    String? endpoint, {
    String? overrideBaseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {#overrideBaseUrl: overrideBaseUrl},
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<_i7.Uint8List> getBytes(String? endpoint) => (super.noSuchMethod(
        Invocation.method(
          #getBytes,
          [endpoint],
        ),
        returnValue: _i6.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i6.Future<_i7.Uint8List>);
}

/// A class which mocks [CalendarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarService extends _i1.Mock implements _i8.CalendarService {
  MockCalendarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> generateIcsFile({
    required String? eventTitle,
    required DateTime? eventDate,
    required String? location,
    required String? description,
    required String? organizerEmail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateIcsFile,
          [],
          {
            #eventTitle: eventTitle,
            #eventDate: eventDate,
            #location: location,
            #description: description,
            #organizerEmail: organizerEmail,
          },
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateIcsFile,
            [],
            {
              #eventTitle: eventTitle,
              #eventDate: eventDate,
              #location: location,
              #description: description,
              #organizerEmail: organizerEmail,
            },
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<String> saveIcsFile({
    required String? icsContent,
    required String? fileName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveIcsFile,
          [],
          {
            #icsContent: icsContent,
            #fileName: fileName,
          },
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #saveIcsFile,
            [],
            {
              #icsContent: icsContent,
              #fileName: fileName,
            },
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<String> generateCalendarLink({
    required String? eventTitle,
    required DateTime? eventDate,
    required String? location,
    required String? description,
    required String? organizerEmail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateCalendarLink,
          [],
          {
            #eventTitle: eventTitle,
            #eventDate: eventDate,
            #location: location,
            #description: description,
            #organizerEmail: organizerEmail,
          },
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateCalendarLink,
            [],
            {
              #eventTitle: eventTitle,
              #eventDate: eventDate,
              #location: location,
              #description: description,
              #organizerEmail: organizerEmail,
            },
          ),
        )),
      ) as _i6.Future<String>);

  @override
  String generateUID(
    String? eventTitle,
    DateTime? eventDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateUID,
          [
            eventTitle,
            eventDate,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateUID,
            [
              eventTitle,
              eventDate,
            ],
          ),
        ),
      ) as String);

  @override
  String formatDateTime(DateTime? dateTime) => (super.noSuchMethod(
        Invocation.method(
          #formatDateTime,
          [dateTime],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #formatDateTime,
            [dateTime],
          ),
        ),
      ) as String);

  @override
  String escapeText(String? text) => (super.noSuchMethod(
        Invocation.method(
          #escapeText,
          [text],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #escapeText,
            [text],
          ),
        ),
      ) as String);

  @override
  String sanitizeFileName(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #sanitizeFileName,
          [fileName],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #sanitizeFileName,
            [fileName],
          ),
        ),
      ) as String);

  @override
  String formatDateForFileName(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #formatDateForFileName,
          [date],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #formatDateForFileName,
            [date],
          ),
        ),
      ) as String);
}

/// A class which mocks [EmailSender].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailSender extends _i1.Mock implements _i9.EmailSender {
  MockEmailSender() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.SendReport> send(
    _i2.Message? message,
    _i10.SmtpServer? server,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [
            message,
            server,
          ],
        ),
        returnValue: _i6.Future<_i2.SendReport>.value(_FakeSendReport_0(
          this,
          Invocation.method(
            #send,
            [
              message,
              server,
            ],
          ),
        )),
      ) as _i6.Future<_i2.SendReport>);
}
