// Mocks generated by Mockito 5.4.6 from annotations
// in meinbssb/test/unit/screens/personal_data_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i9;

import 'package:meinbssb/models/bank_data.dart' as _i11;
import 'package:meinbssb/models/contact.dart' as _i8;
import 'package:meinbssb/models/disziplin.dart' as _i10;
import 'package:meinbssb/models/fremde_verband.dart' as _i13;
import 'package:meinbssb/models/pass_data_zve.dart' as _i5;
import 'package:meinbssb/models/schulung.dart' as _i7;
import 'package:meinbssb/models/user_data.dart' as _i4;
import 'package:meinbssb/models/verein.dart' as _i12;
import 'package:meinbssb/models/zweitmitgliedschaft_data.dart' as _i6;
import 'package:meinbssb/services/api_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> hasInternet() => (super.noSuchMethod(
        Invocation.method(
          #hasInternet,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  Duration getCacheExpirationDuration() => (super.noSuchMethod(
        Invocation.method(
          #getCacheExpirationDuration,
          [],
        ),
        returnValue: _FakeDuration_0(
          this,
          Invocation.method(
            #getCacheExpirationDuration,
            [],
          ),
        ),
      ) as Duration);

  @override
  _i3.Future<Map<String, dynamic>> register({
    required String? firstName,
    required String? lastName,
    required String? passNumber,
    required String? email,
    required String? birthDate,
    required String? zipCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #passNumber: passNumber,
            #email: email,
            #birthDate: birthDate,
            #zipCode: zipCode,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> resetPassword(String? passNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [passNumber],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<_i4.UserData?> fetchPassdaten(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPassdaten,
          [personId],
        ),
        returnValue: _i3.Future<_i4.UserData?>.value(),
      ) as _i3.Future<_i4.UserData?>);

  @override
  _i3.Future<List<_i5.PassDataZVE>> fetchPassdatenZVE(
    int? passdatenId,
    int? personId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPassdatenZVE,
          [
            passdatenId,
            personId,
          ],
        ),
        returnValue:
            _i3.Future<List<_i5.PassDataZVE>>.value(<_i5.PassDataZVE>[]),
      ) as _i3.Future<List<_i5.PassDataZVE>>);

  @override
  _i3.Future<bool> updateKritischeFelderUndAdresse(_i4.UserData? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateKritischeFelderUndAdresse,
          [userData],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i6.ZweitmitgliedschaftData>> fetchZweitmitgliedschaften(
          int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchZweitmitgliedschaften,
          [personId],
        ),
        returnValue: _i3.Future<List<_i6.ZweitmitgliedschaftData>>.value(
            <_i6.ZweitmitgliedschaftData>[]),
      ) as _i3.Future<List<_i6.ZweitmitgliedschaftData>>);

  @override
  _i3.Future<List<_i7.Schulung>> fetchAbsolvierteSeminare(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAbsolvierteSeminare,
          [personId],
        ),
        returnValue: _i3.Future<List<_i7.Schulung>>.value(<_i7.Schulung>[]),
      ) as _i3.Future<List<_i7.Schulung>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> fetchKontakte(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchKontakte,
          [personId],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<bool> addKontakt(_i8.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #addKontakt,
          [contact],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteKontakt(_i8.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #deleteKontakt,
          [contact],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i9.Uint8List> fetchSchuetzenausweis(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSchuetzenausweis,
          [personId],
        ),
        returnValue: _i3.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i3.Future<_i9.Uint8List>);

  @override
  _i3.Future<List<_i7.Schulung>> fetchSchulungsarten() => (super.noSuchMethod(
        Invocation.method(
          #fetchSchulungsarten,
          [],
        ),
        returnValue: _i3.Future<List<_i7.Schulung>>.value(<_i7.Schulung>[]),
      ) as _i3.Future<List<_i7.Schulung>>);

  @override
  _i3.Future<List<_i7.Schulung>> fetchAngemeldeteSchulungen(
    int? personId,
    String? abDatum,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAngemeldeteSchulungen,
          [
            personId,
            abDatum,
          ],
        ),
        returnValue: _i3.Future<List<_i7.Schulung>>.value(<_i7.Schulung>[]),
      ) as _i3.Future<List<_i7.Schulung>>);

  @override
  _i3.Future<List<_i7.Schulung>> fetchAvailableSchulungen() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAvailableSchulungen,
          [],
        ),
        returnValue: _i3.Future<List<_i7.Schulung>>.value(<_i7.Schulung>[]),
      ) as _i3.Future<List<_i7.Schulung>>);

  @override
  _i3.Future<bool> unregisterFromSchulung(int? schulungenTeilnehmerID) =>
      (super.noSuchMethod(
        Invocation.method(
          #unregisterFromSchulung,
          [schulungenTeilnehmerID],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> registerFromSchulung(
    int? personId,
    int? schulungId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerFromSchulung,
          [
            personId,
            schulungId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i10.Disziplin>> fetchDisziplinen() => (super.noSuchMethod(
        Invocation.method(
          #fetchDisziplinen,
          [],
        ),
        returnValue: _i3.Future<List<_i10.Disziplin>>.value(<_i10.Disziplin>[]),
      ) as _i3.Future<List<_i10.Disziplin>>);

  @override
  _i3.Future<List<_i11.BankData>> fetchBankData(int? webloginId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBankData,
          [webloginId],
        ),
        returnValue: _i3.Future<List<_i11.BankData>>.value(<_i11.BankData>[]),
      ) as _i3.Future<List<_i11.BankData>>);

  @override
  _i3.Future<bool> registerBankData(_i11.BankData? bankData) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerBankData,
          [bankData],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteBankData(_i11.BankData? bankData) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBankData,
          [bankData],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i12.Verein>> fetchVereine() => (super.noSuchMethod(
        Invocation.method(
          #fetchVereine,
          [],
        ),
        returnValue: _i3.Future<List<_i12.Verein>>.value(<_i12.Verein>[]),
      ) as _i3.Future<List<_i12.Verein>>);

  @override
  _i3.Future<List<_i12.Verein>> fetchVerein(int? vereinsNr) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVerein,
          [vereinsNr],
        ),
        returnValue: _i3.Future<List<_i12.Verein>>.value(<_i12.Verein>[]),
      ) as _i3.Future<List<_i12.Verein>>);

  @override
  _i3.Future<List<_i13.FremdeVerband>> fetchFremdeVerbaende(int? vereinsNr) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFremdeVerbaende,
          [vereinsNr],
        ),
        returnValue:
            _i3.Future<List<_i13.FremdeVerband>>.value(<_i13.FremdeVerband>[]),
      ) as _i3.Future<List<_i13.FremdeVerband>>);
}
