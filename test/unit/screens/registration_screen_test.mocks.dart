// Mocks generated by Mockito 5.4.6 from annotations
// in meinbssb/test/unit/screens/registration_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mailer/mailer.dart' as _i2;
import 'package:mailer/smtp_server.dart' as _i7;
import 'package:meinbssb/services/api/auth_service.dart' as _i3;
import 'package:meinbssb/services/core/config_service.dart' as _i6;
import 'package:meinbssb/services/core/email_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSendReport_0 extends _i1.SmartFake implements _i2.SendReport {
  _FakeSendReport_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> register({
    required String? firstName,
    required String? lastName,
    required String? passNumber,
    required String? email,
    required String? birthDate,
    required String? zipCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #passNumber: passNumber,
            #email: email,
            #birthDate: birthDate,
            #zipCode: zipCode,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> resetPassword(String? passNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [passNumber],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [EmailService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailService extends _i1.Mock implements _i5.EmailService {
  MockEmailService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> sendEmail({
    required String? from,
    required String? recipient,
    required String? subject,
    String? body,
    int? emailId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmail,
          [],
          {
            #from: from,
            #recipient: recipient,
            #subject: subject,
            #body: body,
            #emailId: emailId,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<String?> getRegistrationSubject() => (super.noSuchMethod(
        Invocation.method(
          #getRegistrationSubject,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getRegistrationContent() => (super.noSuchMethod(
        Invocation.method(
          #getRegistrationContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getFromEmail() => (super.noSuchMethod(
        Invocation.method(
          #getFromEmail,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i6.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int? getInt(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getInt,
        [
          key,
          section,
        ],
      )) as int?);

  @override
  String? getString(
    String? key, [
    String? section,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getString,
        [
          key,
          section,
        ],
      )) as String?);
}

/// A class which mocks [EmailSender].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailSender extends _i1.Mock implements _i5.EmailSender {
  MockEmailSender() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SendReport> send(
    _i2.Message? message,
    _i7.SmtpServer? server,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [
            message,
            server,
          ],
        ),
        returnValue: _i4.Future<_i2.SendReport>.value(_FakeSendReport_0(
          this,
          Invocation.method(
            #send,
            [
              message,
              server,
            ],
          ),
        )),
      ) as _i4.Future<_i2.SendReport>);
}
