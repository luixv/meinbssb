// Mocks generated by Mockito 5.4.6 from annotations
// in meinbssb/test/unit/screens/registration_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:meinbssb/services/api/auth_service.dart' as _i3;
import 'package:meinbssb/services/core/email_service.dart' as _i6;
import 'package:meinbssb/services/core/postgrest_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostgrestService_0 extends _i1.SmartFake
    implements _i2.PostgrestService {
  _FakePostgrestService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostgrestService get postgrestService => (super.noSuchMethod(
        Invocation.getter(#postgrestService),
        returnValue: _FakePostgrestService_0(
          this,
          Invocation.getter(#postgrestService),
        ),
      ) as _i2.PostgrestService);

  @override
  _i4.Future<Map<String, dynamic>> register({
    required String? firstName,
    required String? lastName,
    required String? passNumber,
    required String? email,
    required String? birthDate,
    required String? zipCode,
    required String? personId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #passNumber: passNumber,
            #email: email,
            #birthDate: birthDate,
            #zipCode: zipCode,
            #personId: personId,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> passwordReset(String? passNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #passwordReset,
          [passNumber],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> changePassword(
    int? personId,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            personId,
            newPassword,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<dynamic> finalizeRegistration({
    required String? email,
    required String? password,
    required String? token,
    required String? personId,
    required String? passNumber,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #finalizeRegistration,
          [],
          {
            #email: email,
            #password: password,
            #token: token,
            #personId: personId,
            #passNumber: passNumber,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> findePersonID2(
    String? nachname,
    String? passnummer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findePersonID2,
          [
            nachname,
            passnummer,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<String> fetchLoginEmail(String? passnummer) => (super.noSuchMethod(
        Invocation.method(
          #fetchLoginEmail,
          [passnummer],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #fetchLoginEmail,
            [passnummer],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> isTokenValid() => (super.noSuchMethod(
        Invocation.method(
          #isTokenValid,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String> getPersonIDByPassnummer(String? passNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPersonIDByPassnummer,
          [passNumber],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPersonIDByPassnummer,
            [passNumber],
          ),
        )),
      ) as _i4.Future<String>);
}

/// A class which mocks [EmailService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailService extends _i1.Mock implements _i6.EmailService {
  MockEmailService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> sendEmail({
    required String? sender,
    required String? recipient,
    required String? subject,
    String? htmlBody,
    int? emailId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmail,
          [],
          {
            #sender: sender,
            #recipient: recipient,
            #subject: subject,
            #htmlBody: htmlBody,
            #emailId: emailId,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<String?> getRegistrationSubject() => (super.noSuchMethod(
        Invocation.method(
          #getRegistrationSubject,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getRegistrationContent() => (super.noSuchMethod(
        Invocation.method(
          #getRegistrationContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getVerificationBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getVerificationBaseUrl,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getWelcomeSubject() => (super.noSuchMethod(
        Invocation.method(
          #getWelcomeSubject,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getWelcomeContent() => (super.noSuchMethod(
        Invocation.method(
          #getWelcomeContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getFromEmail() => (super.noSuchMethod(
        Invocation.method(
          #getFromEmail,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getAccountCreatedSubject() => (super.noSuchMethod(
        Invocation.method(
          #getAccountCreatedSubject,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getAccountCreatedContent() => (super.noSuchMethod(
        Invocation.method(
          #getAccountCreatedContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getSchulungAbmeldungSubject() => (super.noSuchMethod(
        Invocation.method(
          #getSchulungAbmeldungSubject,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getSchulungAbmeldungContent() => (super.noSuchMethod(
        Invocation.method(
          #getSchulungAbmeldungContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getSchulungAnmeldungSubject() => (super.noSuchMethod(
        Invocation.method(
          #getSchulungAnmeldungSubject,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getSchulungAnmeldungContent() => (super.noSuchMethod(
        Invocation.method(
          #getSchulungAnmeldungContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<List<String>> getEmailAddressesByPersonId(String? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmailAddressesByPersonId,
          [personId],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> sendAccountCreationNotifications(
    String? personId,
    String? registeredEmail,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendAccountCreationNotifications,
          [
            personId,
            registeredEmail,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendSchulungAbmeldungEmail({
    required String? personId,
    required String? schulungName,
    required String? schulungDate,
    required String? firstName,
    required String? lastName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSchulungAbmeldungEmail,
          [],
          {
            #personId: personId,
            #schulungName: schulungName,
            #schulungDate: schulungDate,
            #firstName: firstName,
            #lastName: lastName,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendSchulungAnmeldungEmail({
    required String? personId,
    required String? schulungName,
    required String? schulungDate,
    required String? firstName,
    required String? lastName,
    required String? passnumber,
    required String? email,
    required int? schulungRegistered,
    required int? schulungTotal,
    String? location,
    DateTime? eventDateTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSchulungAnmeldungEmail,
          [],
          {
            #personId: personId,
            #schulungName: schulungName,
            #schulungDate: schulungDate,
            #firstName: firstName,
            #lastName: lastName,
            #passnumber: passnumber,
            #email: email,
            #schulungRegistered: schulungRegistered,
            #schulungTotal: schulungTotal,
            #location: location,
            #eventDateTime: eventDateTime,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
