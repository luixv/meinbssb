name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        run: flutter test ./test/unit --coverage
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: 0c923524-38a8-492a-b90d-9798d768ee2d
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  build-android:
    name: Build Android
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Build Android
        run: flutter build apk --release
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    name: Build iOS
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Build iOS Framework
        run: flutter build ios --release --no-codesign
      - name: List build directory contents
        run: |
          echo "Contents of build/ios/:"
          ls -la build/ios/ || echo "build/ios/ not found"
          echo "Contents of build/ios/iphoneos/:"
          ls -la build/ios/iphoneos/ || echo "build/ios/iphoneos/ not found"
      - name: Create iOS Archive
        run: |
          mkdir -p build/ios/archive
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "Creating archive from Runner.app"
            cd build/ios/iphoneos
            zip -r ../archive/ios-app.zip Runner.app
          else
            echo "Runner.app not found, creating placeholder"
            mkdir -p build/ios/archive
            echo "iOS build completed but no distributable app created (requires code signing)" > build/ios/archive/README.txt
            zip build/ios/archive/ios-build-info.zip build/ios/archive/README.txt
          fi
      - name: Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: release-ios
          path: build/ios/archive/*.zip
          if-no-files-found: warn

  build-web:
    name: Build Web
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Build Web
        run: flutter build web
      - name: Upload Web Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-web
          path: build/web
          if-no-files-found: ignore

  build-windows:
    name: Build Windows
    needs: test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Build Windows
        run: flutter build windows
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: release-windows
          path: |
            build/windows/x64/runner/Release/*.exe
            build/windows/x64/runner/Release/*.dll
            build/windows/x64/runner/Release/data/*
          if-no-files-found: error
          
  release:
    name: Create Release
    needs: [build-android, build-ios, build-web, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          VERSION=$(date +%Y.%m.%d-%H%M%S)
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        run: |
          RELEASE_DIR="$GITHUB_WORKSPACE/release_assets"
          mkdir -p "$RELEASE_DIR"

          # Android
          cp "artifacts/release-apk/app-release.apk" "$RELEASE_DIR/"

          # Web
          cd "artifacts/release-web"
          zip -r "$RELEASE_DIR/web_build.zip" .
          cd -

          # Windows
          if [ -d "artifacts/release-windows" ]; then
            cd "artifacts/release-windows"
            zip -r "$RELEASE_DIR/windows_build.zip" *
            cd -
          else
            echo "::warning::No Windows build found"
          fi

          # iOS
          if [ -d "artifacts/release-ios" ]; then
            cp artifacts/release-ios/*.zip "$RELEASE_DIR/" 2>/dev/null || echo "::warning::No iOS zip files found"
          else
            echo "::warning::No iOS build artifacts found"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: release_assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}