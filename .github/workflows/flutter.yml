name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: read
  actions: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
          # flutter test ./test/unit --coverage        COMMENTED FOR THE TIME BEING
        run: echo "Skipping unit tests for now"
 
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  build-android:
    name: Build Android
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true

        # --------------------------------------------------
        # Decode the Base64 Keystore Secret into a file
        # --------------------------------------------------
      - name: Decode and Setup Keystore File
        run: |
          mkdir -p android/app
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "Keystore file created at android/app/upload-keystore.jks"
          ls -la android/app/upload-keystore.jks        
      
      # --------------------------------------------------
      # Extract version from pubspec.yaml
      # --------------------------------------------------
      - name: Extract version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' ' | tr '+' '-')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      # --------------------------------------------------
      # Clean previous builds
      # --------------------------------------------------
      - name: Clean previous builds
        run: |
          flutter clean
          # Stop any running Gradle daemons
          cd android && ./gradlew --stop || true
          cd ..
      
      # --------------------------------------------------
      # Install dependencies
      # --------------------------------------------------
      - name: Install dependencies
        run: flutter pub get
      - name: Replace config for deployment
        run: |
          echo "Copying config.test.json to config.json for deployment"
          echo "--- Original config.json (first 30 lines) ---"
          head -30 assets/config.json || echo "No original config.json found"
          cp assets/config.test.json assets/config.json
          echo "--- New config.json (first 30 lines) ---"
          head -30 assets/config.json
          echo "Config file replaced successfully"


      # --------------------------------------------------
      # Build APK (with signing)
      # --------------------------------------------------
      - name: Build APK
        
        run: |
          # Disable web build in CI/CD
          export FLUTTER_WEB=false

          # Pass full path to keystore and passwords via environment variables
          export KEY_STORE_FILE=$GITHUB_WORKSPACE/android/app/upload-keystore.jks
          export KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}
          export KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          export KEY_KEY_PASSWORD=${{ secrets.KEY_KEY_PASSWORD }}
        
          # Sanity check for keystore file
          if [ ! -f "$KEY_STORE_FILE" ]; then
            echo "::error::Keystore file not found at $KEY_STORE_FILE"
            exit 1
          else
            echo "Keystore found at $KEY_STORE_FILE"
          fi

          flutter build apk --release --obfuscate --split-debug-info=build/app/outputs/symbols


      - name: Create versioned APK archive
        run: |
          # Disable file watchers and hot reload for CI/CD
          export FLUTTER_WEB=false
          mkdir -p release_artifacts
          # Rename APK to include version
          
          cp build/app/outputs/flutter-apk/app-release.apk release_artifacts/meinbssb-${{ steps.version.outputs.version }}.apk
          cd release_artifacts
          zip release-${{ steps.version.outputs.version }}-apk.zip meinbssb-${{ steps.version.outputs.version }}.apk


      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}-apk
          path: release_artifacts/release-${{ steps.version.outputs.version }}-apk.zip
          if-no-files-found: error

  build-android-aab:
    name: Build Android AAB
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true

      - name: Decode and Setup Keystore File
        run: |
          mkdir -p android/app
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "Keystore file created at android/app/upload-keystore.jks"
          ls -la android/app/upload-keystore.jks  

      - name: Extract version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' ' | tr '+' '-')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Clean previous builds
        run: |
          flutter clean
          cd android && ./gradlew --stop || true
          cd ..

      - name: Install dependencies
        run: flutter pub get

      - name: Replace config for deployment
        run: cp assets/config.test.json assets/config.json

      - name: Build AAB
        run: |
          export FLUTTER_WEB=false
          export KEY_STORE_FILE=$GITHUB_WORKSPACE/android/app/upload-keystore.jks
          export KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}
          export KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          export KEY_KEY_PASSWORD=${{ secrets.KEY_KEY_PASSWORD }}

          if [ ! -f "$KEY_STORE_FILE" ]; then
            echo "::error::Keystore file not found at $KEY_STORE_FILE"
            exit 1
          fi

          flutter build appbundle --release --obfuscate --split-debug-info=build/app/outputs/symbols

      - name: Create versioned AAB archive
        run: |
          mkdir -p release_artifacts
          cp build/app/outputs/bundle/release/app-release.aab release_artifacts/meinbssb-${{ steps.version.outputs.version }}.aab
          cd release_artifacts
          zip release-${{ steps.version.outputs.version }}-aab.zip meinbssb-${{ steps.version.outputs.version }}.aab

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}-aab
          path: release_artifacts/release-${{ steps.version.outputs.version }}-aab.zip
          if-no-files-found: error

  

          
  build-ios:
    name: Build iOS
    needs: test
    runs-on: macos-13
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Extract version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' ' | tr '+' '-')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      - name: Clean previous builds
        run: flutter clean
      - name: Install dependencies
        run: flutter pub get
      - name: Replace config for deployment
        run: |
          echo "Original config (first 30 lines):"
          head -30 assets/config.json
          echo "Copying config.test.json to config.json for deployment"
          cp assets/config.test.json assets/config.json
          echo "New config (first 30 lines):"
          head -30 assets/config.json
          echo "Config file replaced successfully"
      - name: Build iOS Framework
        run: |
          # Disable file watchers for CI/CD
          export FLUTTER_WEB=false
          flutter build ios --release --obfuscate --split-debug-info=build/app/outputs/symbols 
      - name: List build directory contents
        run: |
          echo "Contents of build/ios/:":
          ls -la build/ios/ || echo "build/ios/ does not exist"
          if [ -d "build/ios/iphoneos" ]; then
            echo "Contents of build/ios/iphoneos/:":
            ls -la build/ios/iphoneos/
          fi
      - name: Create iOS Archive
        run: |
          mkdir -p build/ios/archive
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "Creating archive from Runner.app"
            cd build/ios/iphoneos
            # Rename to include version
            cp -r Runner.app meinbssb-${{ steps.version.outputs.version }}.app
            zip -r ../archive/release-${{ steps.version.outputs.version }}-ios.zip meinbssb-${{ steps.version.outputs.version }}.app
          else
            echo "Runner.app not found, creating placeholder"
            mkdir -p build/ios/archive
            echo "iOS build completed but no distributable app created (requires code signing)" > build/ios/archive/meinbssb-${{ steps.version.outputs.version }}-README.txt
            zip build/ios/archive/release-${{ steps.version.outputs.version }}-ios.zip build/ios/archive/meinbssb-${{ steps.version.outputs.version }}-README.txt
          fi
      - name: Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}-ios
          path: build/ios/archive/*.zip
          if-no-files-found: warn

  build-web:
    name: Build Web
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Extract version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' ' | tr '+' '-')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      - name: Install dependencies
        run: flutter pub get
      - name: Replace config for deployment
        run: |
          echo "Copying config.test.json to config.json for deployment"
          cp assets/config.test.json assets/config.json
          echo "Config file replaced successfully"
      - name: Build Web
        run: flutter build web 
      - name: Create versioned Web archive
        run: |
          mkdir -p release_artifacts
          cd build/web
          zip -r ../../release_artifacts/release-${{ steps.version.outputs.version }}-web.zip .
          cd -
      - name: Upload Web Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}-web
          path: release_artifacts/release-${{ steps.version.outputs.version }}-web.zip
          if-no-files-found: ignore

  build-windows:
    name: Build Windows
    needs: test
    runs-on: windows-latest
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true
      - name: Extract version from pubspec.yaml
        id: version
        run: |
          $VERSION = (Get-Content pubspec.yaml | Select-String '^version:').ToString().Split(':')[1].Trim() -replace '\+', '-'
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      - name: Install dependencies
        run: flutter pub get
      - name: Replace config for deployment
        run: |
          echo "Copying config.test.json to config.json for deployment"
          copy assets\config.test.json assets\config.json
          echo "Config file replaced successfully"
      - name: Build Windows
        run: flutter build windows
      - name: Create versioned Windows archive
        run: |
          mkdir release_artifacts
          # Copy and rename main executable
          copy "build\windows\x64\runner\Release\meinbssb.exe" "release_artifacts\meinbssb-${{ steps.version.outputs.version }}.exe"
          # Copy other necessary files
          copy "build\windows\x64\runner\Release\*.dll" "release_artifacts\"
          if (Test-Path "build\windows\x64\runner\Release\data") {
            xcopy "build\windows\x64\runner\Release\data" "release_artifacts\data" /E /I
          }
          # Create ZIP
          Compress-Archive -Path "release_artifacts\*" -DestinationPath "release_artifacts\release-${{ steps.version.outputs.version }}-windows.zip"
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ steps.version.outputs.version }}-windows
          path: release_artifacts/release-${{ steps.version.outputs.version }}-windows.zip
          if-no-files-found: error
  
          
          
  release:
    name: Create Release
    needs: [build-android, build-ios, build-web, build-windows]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          VERSION=$(date +%Y.%m.%d-%H%M%S)
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin refs/tags/${{ steps.version.outputs.tag }}


      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version for release
        id: release_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' ' | tr '+' '-')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version for release: $VERSION"
      
      - name: Prepare Release Assets
        run: |
          RELEASE_DIR="$GITHUB_WORKSPACE/release_assets"
          mkdir -p "$RELEASE_DIR"
          VERSION="${{ steps.release_version.outputs.version }}"

          # Android - copy the versioned zip file
          if [ -d "artifacts/release-$VERSION-apk" ]; then
            cp "artifacts/release-$VERSION-apk/release-$VERSION-apk.zip" "$RELEASE_DIR/"
          else
            echo "::warning::No Android build artifacts found for version $VERSION"
          fi

          # iOS - copy the versioned zip file
          if [ -d "artifacts/release-$VERSION-ios" ]; then
            cp "artifacts/release-$VERSION-ios/release-$VERSION-ios.zip" "$RELEASE_DIR/"
          else
            echo "::warning::No iOS build artifacts found for version $VERSION"
          fi

          # Web - copy the versioned zip file
          if [ -d "artifacts/release-$VERSION-web" ]; then
            cp "artifacts/release-$VERSION-web/release-$VERSION-web.zip" "$RELEASE_DIR/"
          else
            echo "::warning::No Web build artifacts found for version $VERSION"
          fi

          # Windows - copy the versioned zip file
          if [ -d "artifacts/release-$VERSION-windows" ]; then
            cp "artifacts/release-$VERSION-windows/release-$VERSION-windows.zip" "$RELEASE_DIR/"
          else
            echo "::warning::No Windows build artifacts found for version $VERSION"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: release_assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}